AWSTemplateFormatVersion: 2010-09-09
Description: Template to define Module 1 of the Serverless Data Processing semester project

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        DefineAuthChallenge: !GetAtt DefineAuthLambda.Arn
        CreateAuthChallenge: !GetAtt CreateAuthLambda.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthLambda.Arn
        PreSignUp: !GetAtt PreSignUpLambda.Arn
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH

  ChallengeDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserChallenges
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  LambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaCognitoPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:UpdateUserPool
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminInitiateAuth
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt ChallengeDynamoDB.Arn

  DefineAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DefineAuthLambda.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  DefineAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecRole.Arn
      Handler: index.lambda_handler
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
              if len(event['request']['session']) == 0:
                  event['response']['issueTokens'] = False
                  event['response']['failAuthentication'] = False
                  event['response']['challengeName'] = 'CUSTOM_CHALLENGE'
              elif len(event['request']['session']) < 3 and event['request']['session'][-1]['challengeResult']:
                  event['response']['issueTokens'] = False
                  event['response']['failAuthentication'] = False
                  event['response']['challengeName'] = 'CUSTOM_CHALLENGE'
              elif len(event['request']['session']) == 3 and event['request']['session'][-1]['challengeResult']:
                  event['response']['issueTokens'] = True
                  event['response']['failAuthentication'] = False
              else:
                  event['response']['issueTokens'] = False
                  event['response']['failAuthentication'] = True
              return event

  CreateAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CreateAuthLambda.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  CreateAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecRole.Arn
      Handler: index.lambda_handler
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          import random
          def lambda_handler(event, context):
              dynamo = boto3.client('dynamodb')
              username = event['userName']
              challenge = event['request']['challengeName']
              OFFSET = ord('A')

              key = {
                  'userId': {
                      'S': username
                  }
              }

              item = dynamo.get_item(TableName='UserChallenges', Key=key)
              question = item['Item']['challengeQuestion']['S']
              answer = item['Item']['challengeAnswer']['S']
              caesar_key = int(item['Item']['caesarKey']['N'])

              if len(event['request']['session']) == 0:
                  event['response']['publicChallengeParameters'] = {
                      'prompt': 'Enter your password'
                  }
                  event['response']['privateChallengeParameters'] = {
                      'challenge_type': 'PASSWORD'
                  }
              elif len(event['request']['session']) == 1:
                  event['response']['publicChallengeParameters'] = {
                      'prompt': 'Please answer this security question:',
                      'question': question
                  }
                  event['response']['privateChallengeParameters'] = {
                      'challenge_type': 'CHALLENGE_QUESTION',
                      'answer': answer
                  }
              elif len(event['request']['session']) == 2:
                  vals = [x for x in range(26)]
                  random_vals = [random.choice(vals) for _ in range(5)]

                  challenge_string = ''.join(chr(x + OFFSET) for x in random_vals)
                  answer_string = ''.join(chr(((x + caesar_key) % 26) + OFFSET) for x in random_vals)
                  event['response']['publicChallengeParameters'] = {
                      'prompt': 'Please apply your caesar cipher to this string:',
                      'question': challenge_string
                  }
                  event['response']['privateChallengeParameters'] = {
                      'challenge_type': 'CAESAR',
                      'answer': answer_string
                  }

              return event

  VerifyAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt VerifyAuthLambda.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn
  
  VerifyAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecRole.Arn
      Handler: index.lambda_handler
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          import os
          def lambda_handler(event, context):
              challenge_type = event['request']['privateChallengeParameters']['challenge_type']
              given_answer = event['request']['challengeAnswer']
              correct = False

              if challenge_type == 'PASSWORD':
                  cognito = boto3.client('cognito-idp')
                  client_id = event['request']['clientMetadata']['CLIENT_ID']
                  try:
                      cognito.admin_initiate_auth(
                          UserPoolId=event['userPoolId'],
                          ClientId=client_id,
                          AuthFlow='ADMIN_NO_SRP_AUTH',
                          AuthParameters={
                              'USERNAME': event['userName'],
                              'PASSWORD': given_answer
                          }
                      )
                      correct = True
                  except cognito.exceptions.NotAuthorizedException:
                      correct = False
              elif challenge_type == 'CHALLENGE_QUESTION' or challenge_type == 'CAESAR':
                  expected_answer = event['request']['privateChallengeParameters']['answer']
                  correct = (given_answer == expected_answer)
              
              event['response']['answerCorrect'] = correct
              return event

  PreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreSignUpLambda.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  PreSignUpLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecRole.Arn
      Handler: index.lambda_handler
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
              event['response']['autoConfirmUser'] = True
              metadata = event['request']['clientMetadata']

              dynamo = boto3.client('dynamodb')
              
              item = {
                  'userId': {
                      'S': event['userName']
                  },
                  'challengeQuestion': {
                      'S': metadata['challenge_question']
                  },
                  'challengeAnswer': {
                      'S': metadata['challenge_answer']
                  },
                  'caesarKey': {
                      'N': metadata['caesar_key']
                  }
              }

              dynamo.put_item(TableName='UserChallenges', Item=item)

              return event

Outputs:
  CognitoClientId:
    Value: !GetAtt UserPoolClient.ClientId
    Description: Cognito Client ID
